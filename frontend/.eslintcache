[{"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\index.js":"1","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\App.js":"2","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Footer.js":"3","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Cities.js":"4","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Header.js":"5","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Home.js":"6","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Botones.js":"7","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Carousell.js":"8","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Slide.js":"9","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Itineraries.js":"10"},{"size":216,"mtime":1610846935105,"results":"11","hashOfConfig":"12"},{"size":930,"mtime":1611098047806,"results":"13","hashOfConfig":"12"},{"size":190,"mtime":1610849087806,"results":"14","hashOfConfig":"12"},{"size":3552,"mtime":1611531928791,"results":"15","hashOfConfig":"12"},{"size":957,"mtime":1610851429024,"results":"16","hashOfConfig":"12"},{"size":1033,"mtime":1611510494004,"results":"17","hashOfConfig":"12"},{"size":509,"mtime":1611517667590,"results":"18","hashOfConfig":"12"},{"size":2836,"mtime":1611087977030,"results":"19","hashOfConfig":"12"},{"size":2004,"mtime":1611511191005,"results":"20","hashOfConfig":"12"},{"size":2142,"mtime":1611713298137,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"rkct7v",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\index.js",[],["46","47"],"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\App.js",[],"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Cities.js",["48"],"import { Link } from \"react-router-dom\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\n\r\n\r\nexport const Cities = () => {\r\n    const [cities, setCities] = useState([]) // se carga el componente, se monta, inicia con var cities en un array vacío\r\n    const [citiesFilter, setCitiesFilter] = useState(\"\") \r\n    const [resultsFilter, setResultsFilter] = useState([])\r\n    const [alert, setAlert] = useState(false)\r\n\r\n    useEffect(() => { // las hooks fetchean el backend, éste contesta con la info de la base de datos\r\n        fetch(\"http://localhost:4000/api/cities\") //  fetchea mi backend\r\n            .then(response => response.json()) // recibo rta y la convierto a objeto js\r\n            .then(data => {\r\n                setCities(data.respuesta)\r\n                setResultsFilter(data.respuesta)\r\n\r\n            })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        const resultEnd = cities.filter(city => city.cityName.toLowerCase().indexOf(citiesFilter.toLowerCase().trim()) === 0)\r\n        // guardo filtro en cities, comparando en cada vuelta la DB con lo ingresado por input, primer ocurrencia pasando todo a minusculas, sin espacios\r\n\r\n        setResultsFilter(resultEnd)\r\n        resultEnd.length === 0 ? setAlert(true) : setAlert(false)\r\n        // modifico estado de var Alert, en base al resultado del filtro, si es 0 true, sino false y renderiza mensaje Alert\r\n\r\n\r\n    }, [cities, citiesFilter])\r\n\r\n    const search = e => { // acá capturo el evento y modifico el estado de citiesFilter\r\n        setCitiesFilter(e.target.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <section className=\"section\" className=\"section\" style={{\r\n            backgroundImage: `url(\"../assets/fondoacua.jpg\")`\r\n        }}>\r\n            <div className=\"filter\">\r\n                <input onChange={search} type=\"text\" placeholder=\"Search City\" ></input>\r\n            </div>\r\n            <div className=\"contenedorCities\">\r\n                {!alert ?\r\n                    resultsFilter.map(({ cityName, cityPic, _id}) => { // Mapeo array de objetos con información de cada ciudad\r\n\r\n                        return (\r\n                            <>\r\n                                <Link key={_id} className=\"cities\" to={`/city/${_id}`} style={{ textDecoration: \"none\" }}>\r\n                                    <div  className=\"citiesImage\" style={{\r\n                                        backgroundImage: `url(\"${cityPic}\")`\r\n                                    }}><p className=\"citiesTitle\">{cityName} </p>\r\n\r\n                                    </div>\r\n                                </Link>\r\n                            </>\r\n                        )\r\n                    })\r\n\r\n                    : <div className=\"alert\" style={{\r\n                        backgroundImage: `url(\"../assets/fondoHuellas.jpg\"`,\r\n                        width: \"40vw\", height: \"60vh\"\r\n                    }}><div className=\"alertTitle\"><p>Oops! we still haven't traveled to that city</p></div>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default Cities\r\n\r\n\r\n\r\n// REACT SE ASEGURA QUE EL DOM SE HA ACTUALIZADO ANTES DE LLEVAR A CABO LAS HOOKS\r\n// ESTA función que pasamos es nuestro efecto Y Dentro de nuestro efecto actualizamos Usando la API del navegador \r\n// Cuando React renderiza nuestro componente, recordará este efecto y lo ejecutará después de actualizar el DOM. Esto sucede en cada renderizado, incluyendo el primero.\r\n//recordar que STATE ES UN OBJETO QUE PERMITE DINAMIZAR A REACT EL RENDERIZADO\r\n//","C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Header.js",[],"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Home.js",[],"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Botones.js",[],"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Carousell.js",[],"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Slide.js",[],["49","50"],"C:\\Users\\Luxis\\Desktop\\Repositorio\\pereyra-mytinerary\\frontend\\src\\components\\Itineraries.js",["51"],"import React, { useEffect, useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n\r\nexport const Itineraries = (props) => { // props URL \r\n    const [itinerary, setItinerary] = useState({}) // mi estado inicia en un objeto vacío\r\n    console.log(itinerary)\r\n\r\n    useEffect(() => {\r\n        const id = props.match.params.id // captura id que le pasan por url (cuando hacen click en la foto)\r\n        fetch(\"http://localhost:4000/api/city/\" + id)\r\n            .then(response => response.json())\r\n            .then(data => setItinerary(data.respuesta))\r\n            .catch(error => console.log(error))\r\n    }, [])\r\n\r\n    return (\r\n        <section className=\"section\" style={{\r\n            backgroundImage: `url(\"../assets/fondoacua.jpg\")`\r\n        }}>\r\n            <div className=\"contenedorCity\">\r\n                <div className=\"cityImage\" style={{\r\n                    backgroundImage: `url(\"${itinerary.cityPic}\")`                    \r\n                }}><p className=\"cityTitle\">{itinerary.cityName}</p>\r\n\r\n\r\n                </div>\r\n                <div className=\"alert\" style={{\r\n                    backgroundImage: `url(\"../assets/fondoHuellas.jpg\"`,\r\n                    width: \"40vw\", height: \"40vh\"\r\n                }}>\r\n                    {!itinerary.cityActivity && (\r\n                        <div className=\"alertTitle\"> <p >Oops! we don't have itineraries to show yet</p> </div>\r\n                    )}\r\n                </div>\r\n                <Link className=\"linkItineraries\" to=\"/cities\"\r\n                    style={{ textDecoration: \"none\" }}> <img src=\"../assets/Arrowleft.png\" alt=\"\" />Back to Cities!\r\n                </Link>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Itineraries\r\n\r\n\r\n// paso las props propias del componente Itineraries, todas las url las tienen\r\n // el id que llega a las props es el indicado en el Route\r\n\r\n\r\n//  data.map(info => { // mapeo data \r\n// if (info._id === id) { // comparo el _id de cada objeto dentro de mi array con el id que me pasan por url\r\n//     setItinerary(info) // carga resultado al valor de var itinerary por medio de la funcion \r\n// }",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":40,"column":38,"nodeType":"58","endLine":40,"endColumn":57},{"ruleId":"52","replacedBy":"59"},{"ruleId":"54","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":15,"column":8,"nodeType":"63","endLine":15,"endColumn":10,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["65"],["66"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [props.match.params.id]",{"range":"70","text":"71"},[621,623],"[props.match.params.id]"]